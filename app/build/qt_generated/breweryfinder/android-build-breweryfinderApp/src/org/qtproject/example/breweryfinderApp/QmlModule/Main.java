/* This file is autogenerated by androiddeployqt. Do not edit */

package org.qtproject.example.breweryfinderApp.QmlModule;

import org.qtproject.qt.android.QtSignalListener;
import org.qtproject.qt.android.QtQuickViewContent;

public final class Main extends QtQuickViewContent {
    @Override public String getLibraryName() {
        return "breweryfinderApp";
    }
    @Override public String getModuleName() {
        return "qmlModule";
    }
    @Override public String getFilePath() {
        return "qrc:/qt/qml/qmlModule/Main.qml";
    }
    public Boolean getActiveFocus() { return this.<Boolean>getProperty("activeFocus"); }
    public int connectActiveFocusChangeListener(QtSignalListener<Boolean> signalListener) {
        return connectSignalListener("activeFocus", Boolean.class, signalListener);
    }
    public void setActiveFocusOnTab(Boolean activeFocusOnTab) { setProperty("activeFocusOnTab", activeFocusOnTab); }
    public Boolean getActiveFocusOnTab() { return this.<Boolean>getProperty("activeFocusOnTab"); }
    public int connectActiveFocusOnTabChangeListener(QtSignalListener<Boolean> signalListener) {
        return connectSignalListener("activeFocusOnTab", Boolean.class, signalListener);
    }
    public Object getAnchors() { return this.<Object>getProperty("anchors"); }
    public int connectAnchorsChangeListener(QtSignalListener<Object> signalListener) {
        return connectSignalListener("anchors", Object.class, signalListener);
    }
    public void setAntialiasing(Boolean antialiasing) { setProperty("antialiasing", antialiasing); }
    public Boolean getAntialiasing() { return this.<Boolean>getProperty("antialiasing"); }
    public int connectAntialiasingChangeListener(QtSignalListener<Boolean> signalListener) {
        return connectSignalListener("antialiasing", Boolean.class, signalListener);
    }
    public Object getBaseline() { return this.<Object>getProperty("baseline"); }
    public int connectBaselineChangeListener(QtSignalListener<Object> signalListener) {
        return connectSignalListener("baseline", Object.class, signalListener);
    }
    public void setBaselineOffset(Double baselineOffset) { setProperty("baselineOffset", baselineOffset); }
    public Double getBaselineOffset() { return this.<Double>getProperty("baselineOffset"); }
    public int connectBaselineOffsetChangeListener(QtSignalListener<Double> signalListener) {
        return connectSignalListener("baselineOffset", Double.class, signalListener);
    }
    public Object getBorder() { return this.<Object>getProperty("border"); }
    public int connectBorderChangeListener(QtSignalListener<Object> signalListener) {
        return connectSignalListener("border", Object.class, signalListener);
    }
    public Object getBottom() { return this.<Object>getProperty("bottom"); }
    public int connectBottomChangeListener(QtSignalListener<Object> signalListener) {
        return connectSignalListener("bottom", Object.class, signalListener);
    }
    public Object getChildren() { return this.<Object>getProperty("children"); }
    public int connectChildrenChangeListener(QtSignalListener<Object> signalListener) {
        return connectSignalListener("children", Object.class, signalListener);
    }
    public Object getChildrenRect() { return this.<Object>getProperty("childrenRect"); }
    public int connectChildrenRectChangeListener(QtSignalListener<Object> signalListener) {
        return connectSignalListener("childrenRect", Object.class, signalListener);
    }
    public void setClip(Boolean clip) { setProperty("clip", clip); }
    public Boolean getClip() { return this.<Boolean>getProperty("clip"); }
    public int connectClipChangeListener(QtSignalListener<Boolean> signalListener) {
        return connectSignalListener("clip", Boolean.class, signalListener);
    }
    public void setColor(Object color) { setProperty("color", color); }
    public Object getColor() { return this.<Object>getProperty("color"); }
    public int connectColorChangeListener(QtSignalListener<Object> signalListener) {
        return connectSignalListener("color", Object.class, signalListener);
    }
    public void setContainmentMask(Object containmentMask) { setProperty("containmentMask", containmentMask); }
    public Object getContainmentMask() { return this.<Object>getProperty("containmentMask"); }
    public int connectContainmentMaskChangeListener(QtSignalListener<Object> signalListener) {
        return connectSignalListener("containmentMask", Object.class, signalListener);
    }
    public Object getData() { return this.<Object>getProperty("data"); }
    public int connectDataChangeListener(QtSignalListener<Object> signalListener) {
        return connectSignalListener("data", Object.class, signalListener);
    }
    public void setEnabled(Boolean enabled) { setProperty("enabled", enabled); }
    public Boolean getEnabled() { return this.<Boolean>getProperty("enabled"); }
    public int connectEnabledChangeListener(QtSignalListener<Boolean> signalListener) {
        return connectSignalListener("enabled", Boolean.class, signalListener);
    }
    public void setFocus(Boolean focus) { setProperty("focus", focus); }
    public Boolean getFocus() { return this.<Boolean>getProperty("focus"); }
    public int connectFocusChangeListener(QtSignalListener<Boolean> signalListener) {
        return connectSignalListener("focus", Boolean.class, signalListener);
    }
    public void setFocusPolicy(Object focusPolicy) { setProperty("focusPolicy", focusPolicy); }
    public Object getFocusPolicy() { return this.<Object>getProperty("focusPolicy"); }
    public int connectFocusPolicyChangeListener(QtSignalListener<Object> signalListener) {
        return connectSignalListener("focusPolicy", Object.class, signalListener);
    }
    public void setGradient(Object gradient) { setProperty("gradient", gradient); }
    public Object getGradient() { return this.<Object>getProperty("gradient"); }
    public int connectGradientChangeListener(QtSignalListener<Object> signalListener) {
        return connectSignalListener("gradient", Object.class, signalListener);
    }
    public void setHeight(Double height) { setProperty("height", height); }
    public Double getHeight() { return this.<Double>getProperty("height"); }
    public int connectHeightChangeListener(QtSignalListener<Double> signalListener) {
        return connectSignalListener("height", Double.class, signalListener);
    }
    public Object getHorizontalCenter() { return this.<Object>getProperty("horizontalCenter"); }
    public int connectHorizontalCenterChangeListener(QtSignalListener<Object> signalListener) {
        return connectSignalListener("horizontalCenter", Object.class, signalListener);
    }
    public void setImplicitHeight(Double implicitHeight) { setProperty("implicitHeight", implicitHeight); }
    public Double getImplicitHeight() { return this.<Double>getProperty("implicitHeight"); }
    public int connectImplicitHeightChangeListener(QtSignalListener<Double> signalListener) {
        return connectSignalListener("implicitHeight", Double.class, signalListener);
    }
    public void setImplicitWidth(Double implicitWidth) { setProperty("implicitWidth", implicitWidth); }
    public Double getImplicitWidth() { return this.<Double>getProperty("implicitWidth"); }
    public int connectImplicitWidthChangeListener(QtSignalListener<Double> signalListener) {
        return connectSignalListener("implicitWidth", Double.class, signalListener);
    }
    public Object getLayer() { return this.<Object>getProperty("layer"); }
    public int connectLayerChangeListener(QtSignalListener<Object> signalListener) {
        return connectSignalListener("layer", Object.class, signalListener);
    }
    public Object getLeft() { return this.<Object>getProperty("left"); }
    public int connectLeftChangeListener(QtSignalListener<Object> signalListener) {
        return connectSignalListener("left", Object.class, signalListener);
    }
    public void setLongestNameBrewery(String longestNameBrewery) { setProperty("longestNameBrewery", longestNameBrewery); }
    public String getLongestNameBrewery() { return this.<String>getProperty("longestNameBrewery"); }
    public int connectLongestNameBreweryChangeListener(QtSignalListener<String> signalListener) {
        return connectSignalListener("longestNameBrewery", String.class, signalListener);
    }
    public void setNorthernMostBrewery(String northernMostBrewery) { setProperty("northernMostBrewery", northernMostBrewery); }
    public String getNorthernMostBrewery() { return this.<String>getProperty("northernMostBrewery"); }
    public int connectNorthernMostBreweryChangeListener(QtSignalListener<String> signalListener) {
        return connectSignalListener("northernMostBrewery", String.class, signalListener);
    }
    public void setObjectName(Object objectName) { setProperty("objectName", objectName); }
    public Object getObjectName() { return this.<Object>getProperty("objectName"); }
    public int connectObjectNameChangeListener(QtSignalListener<Object> signalListener) {
        return connectSignalListener("objectName", Object.class, signalListener);
    }
    public void setOpacity(Double opacity) { setProperty("opacity", opacity); }
    public Double getOpacity() { return this.<Double>getProperty("opacity"); }
    public int connectOpacityChangeListener(QtSignalListener<Double> signalListener) {
        return connectSignalListener("opacity", Double.class, signalListener);
    }
    public void setPalette(Object palette) { setProperty("palette", palette); }
    public Object getPalette() { return this.<Object>getProperty("palette"); }
    public int connectPaletteChangeListener(QtSignalListener<Object> signalListener) {
        return connectSignalListener("palette", Object.class, signalListener);
    }
    public void setParent(Object parent) { setProperty("parent", parent); }
    public Object getParent() { return this.<Object>getProperty("parent"); }
    public int connectParentChangeListener(QtSignalListener<Object> signalListener) {
        return connectSignalListener("parent", Object.class, signalListener);
    }
    public void setRadius(Double radius) { setProperty("radius", radius); }
    public Double getRadius() { return this.<Double>getProperty("radius"); }
    public int connectRadiusChangeListener(QtSignalListener<Double> signalListener) {
        return connectSignalListener("radius", Double.class, signalListener);
    }
    public Object getResources() { return this.<Object>getProperty("resources"); }
    public int connectResourcesChangeListener(QtSignalListener<Object> signalListener) {
        return connectSignalListener("resources", Object.class, signalListener);
    }
    public Object getRight() { return this.<Object>getProperty("right"); }
    public int connectRightChangeListener(QtSignalListener<Object> signalListener) {
        return connectSignalListener("right", Object.class, signalListener);
    }
    public void setRotation(Double rotation) { setProperty("rotation", rotation); }
    public Double getRotation() { return this.<Double>getProperty("rotation"); }
    public int connectRotationChangeListener(QtSignalListener<Double> signalListener) {
        return connectSignalListener("rotation", Double.class, signalListener);
    }
    public void setScale(Double scale) { setProperty("scale", scale); }
    public Double getScale() { return this.<Double>getProperty("scale"); }
    public int connectScaleChangeListener(QtSignalListener<Double> signalListener) {
        return connectSignalListener("scale", Double.class, signalListener);
    }
    public void setSmooth(Boolean smooth) { setProperty("smooth", smooth); }
    public Boolean getSmooth() { return this.<Boolean>getProperty("smooth"); }
    public int connectSmoothChangeListener(QtSignalListener<Boolean> signalListener) {
        return connectSignalListener("smooth", Boolean.class, signalListener);
    }
    public void setSouthernMostBrewery(String southernMostBrewery) { setProperty("southernMostBrewery", southernMostBrewery); }
    public String getSouthernMostBrewery() { return this.<String>getProperty("southernMostBrewery"); }
    public int connectSouthernMostBreweryChangeListener(QtSignalListener<String> signalListener) {
        return connectSignalListener("southernMostBrewery", String.class, signalListener);
    }
    public void setState(Object state) { setProperty("state", state); }
    public Object getState() { return this.<Object>getProperty("state"); }
    public int connectStateChangeListener(QtSignalListener<Object> signalListener) {
        return connectSignalListener("state", Object.class, signalListener);
    }
    public Object getStates() { return this.<Object>getProperty("states"); }
    public int connectStatesChangeListener(QtSignalListener<Object> signalListener) {
        return connectSignalListener("states", Object.class, signalListener);
    }
    public Object getTop() { return this.<Object>getProperty("top"); }
    public int connectTopChangeListener(QtSignalListener<Object> signalListener) {
        return connectSignalListener("top", Object.class, signalListener);
    }
    public Object getTransform() { return this.<Object>getProperty("transform"); }
    public int connectTransformChangeListener(QtSignalListener<Object> signalListener) {
        return connectSignalListener("transform", Object.class, signalListener);
    }
    public void setTransformOrigin(Object transformOrigin) { setProperty("transformOrigin", transformOrigin); }
    public Object getTransformOrigin() { return this.<Object>getProperty("transformOrigin"); }
    public int connectTransformOriginChangeListener(QtSignalListener<Object> signalListener) {
        return connectSignalListener("transformOrigin", Object.class, signalListener);
    }
    public Object getTransformOriginPoint() { return this.<Object>getProperty("transformOriginPoint"); }
    public int connectTransformOriginPointChangeListener(QtSignalListener<Object> signalListener) {
        return connectSignalListener("transformOriginPoint", Object.class, signalListener);
    }
    public Object getTransitions() { return this.<Object>getProperty("transitions"); }
    public int connectTransitionsChangeListener(QtSignalListener<Object> signalListener) {
        return connectSignalListener("transitions", Object.class, signalListener);
    }
    public Object getVerticalCenter() { return this.<Object>getProperty("verticalCenter"); }
    public int connectVerticalCenterChangeListener(QtSignalListener<Object> signalListener) {
        return connectSignalListener("verticalCenter", Object.class, signalListener);
    }
    public void setVisible(Boolean visible) { setProperty("visible", visible); }
    public Boolean getVisible() { return this.<Boolean>getProperty("visible"); }
    public int connectVisibleChangeListener(QtSignalListener<Boolean> signalListener) {
        return connectSignalListener("visible", Boolean.class, signalListener);
    }
    public Object getVisibleChildren() { return this.<Object>getProperty("visibleChildren"); }
    public int connectVisibleChildrenChangeListener(QtSignalListener<Object> signalListener) {
        return connectSignalListener("visibleChildren", Object.class, signalListener);
    }
    public void setWidth(Double width) { setProperty("width", width); }
    public Double getWidth() { return this.<Double>getProperty("width"); }
    public int connectWidthChangeListener(QtSignalListener<Double> signalListener) {
        return connectSignalListener("width", Double.class, signalListener);
    }
    public void setX(Double x) { setProperty("x", x); }
    public Double getX() { return this.<Double>getProperty("x"); }
    public int connectXChangeListener(QtSignalListener<Double> signalListener) {
        return connectSignalListener("x", Double.class, signalListener);
    }
    public void setY(Double y) { setProperty("y", y); }
    public Double getY() { return this.<Double>getProperty("y"); }
    public int connectYChangeListener(QtSignalListener<Double> signalListener) {
        return connectSignalListener("y", Double.class, signalListener);
    }
    public void setZ(Double z) { setProperty("z", z); }
    public Double getZ() { return this.<Double>getProperty("z"); }
    public int connectZChangeListener(QtSignalListener<Double> signalListener) {
        return connectSignalListener("z", Double.class, signalListener);
    }
}
